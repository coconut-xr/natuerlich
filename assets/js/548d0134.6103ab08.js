"use strict";(self.webpackChunknatuerlich_docs=self.webpackChunknatuerlich_docs||[]).push([[19],{1946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=t(7462),o=(t(7294),t(3905)),r=t(5851),i=t(5714);const s={},p="Custom Hands and Controllers",l={unversionedId:"custom-input-sources",id:"custom-input-sources",title:"Custom Hands and Controllers",description:"When building a custom hand or controller, we recommend looking at the existing default hands and controllers and modifying them to your needs. In some cases, a completely new interaction type, such as a WhipController, which selects objects with a physical-based whip-pointer, could be required. In such a case, an in-depth understanding of the xinteraction event system should be present.",source:"@site/docs/custom-input-sources.md",sourceDirName:".",slug:"/custom-input-sources",permalink:"/natuerlich/custom-input-sources",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Configuration",permalink:"/natuerlich/configuration"},next:{title:"Guards",permalink:"/natuerlich/guards"}},c={},d=[{value:"Custom Hand",id:"custom-hand",level:2},{value:"Custom Controller",id:"custom-controller",level:2}],u={toc:d},m="wrapper";function h(e){let{components:n,...s}=e;return(0,o.kt)(m,(0,a.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-hands-and-controllers"},"Custom Hands and Controllers"),(0,o.kt)("p",null,"When building a custom hand or controller, we recommend looking at the existing default hands and controllers and modifying them to your needs. In some cases, a completely new interaction type, such as a ",(0,o.kt)("inlineCode",{parentName:"p"},"WhipController"),", which selects objects with a physical-based whip-pointer, could be required. In such a case, an in-depth understanding of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/coconut-xr/xinteraction"},"xinteraction")," event system should be present."),(0,o.kt)("p",null,"The following two sections show how to build a basic ",(0,o.kt)("a",{parentName:"p",href:"#custom-hand"},"custom hand")," and ",(0,o.kt)("a",{parentName:"p",href:"#custom-controller"},"custom controller"),"."),(0,o.kt)("h2",{id:"custom-hand"},"Custom Hand"),(0,o.kt)("p",null,"For a more basic interaction, such as a ",(0,o.kt)("inlineCode",{parentName:"p"},"FistGrabHand"),", which grabs objects based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"fist")," gesture, we can simply modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"GrabHand"),". We use the ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicHandModel")," to display a hand model and the ",(0,o.kt)("inlineCode",{parentName:"p"},"HandBoneGroup")," to display content on a specific joint. In this case, we place a ",(0,o.kt)("inlineCode",{parentName:"p"},"XSphereCollider")," inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrist")," joint. Next, we bind ",(0,o.kt)("inlineCode",{parentName:"p"},"press")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"release")," events of the ",(0,o.kt)("inlineCode",{parentName:"p"},"XSphereCollider")," to the start and end of the ",(0,o.kt)("inlineCode",{parentName:"p"},"fist")," pose."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("em",{parentName:"p"},"For simplicity, the following example does not contain visual effects such as a cursor."))),(0,o.kt)(i.w,{path:"natuerlich-fist-grab-hand-75r355",mdxType:"CodesandboxEmbed"}),(0,o.kt)(r.Z,{img:t(655),mdxType:"Image"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useRef, Suspense } from "react";\nimport { useHandPoses, DynamicHandModel, HandBoneGroup } from "@coconut-xr/natuerlich/react";\nimport { InputDeviceFunctions } from "@coconut-xr/xinteraction";\nimport { XSphereCollider } from "@coconut-xr/xinteraction/react";\n\nexport function FistGrabHand({\n  radius,\n  hand,\n  inputSource,\n  id,\n}: {\n  radius: number;\n  hand: XRHand;\n  inputSource: XRInputSource;\n  id: number;\n}) {\n  const colliderRef = useRef<InputDeviceFunctions>(null);\n\n  useHandPoses(\n    inputSource.hand,\n    inputSource.handedness,\n    (name, prevName) => {\n      const isFist = name === "fist";\n      const wasFist = prevName === "fist";\n      if (isFist == wasFist) {\n        return;\n      }\n      if (isFist) {\n        colliderRef.current?.press(0, {});\n      }\n      if (wasFist) {\n        colliderRef.current?.release(0, {});\n      }\n    },\n    {\n      fist: "fist.handpose",\n      relax: "relax.handpose",\n    },\n  );\n\n  return (\n    <Suspense fallback={null}>\n      <DynamicHandModel hand={hand} handedness={inputSource.handedness}>\n        <HandBoneGroup joint="wrist">\n          <XSphereCollider ref={colliderRef} radius={radius} id={id} />\n        </HandBoneGroup>\n      </DynamicHandModel>\n    </Suspense>\n  );\n}\n')),(0,o.kt)("h2",{id:"custom-controller"},"Custom Controller"),(0,o.kt)("p",null,"In this section, we build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ShortPointerController"),", which is very similar to the normal ",(0,o.kt)("inlineCode",{parentName:"p"},"PointerController")," but has a ray with a length of 10cm."),(0,o.kt)("p",null,"We start by rendering the controller model with the correct transformation. We use a ",(0,o.kt)("inlineCode",{parentName:"p"},"SpaceGroup")," to render a ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicControllerModel")," at the ",(0,o.kt)("inlineCode",{parentName:"p"},"inputSource.gripSpace")," position. The ",(0,o.kt)("inlineCode",{parentName:"p"},"DynamicControllerModel")," will automatically select the correct controller model and apply animations to the buttons etc."),(0,o.kt)("p",null,"Next, we add the ray originating from the ",(0,o.kt)("inlineCode",{parentName:"p"},"inputSource.targetRaySpace"),". We again use a ",(0,o.kt)("inlineCode",{parentName:"p"},"SpaceGroup")," to an ",(0,o.kt)("inlineCode",{parentName:"p"},"XCurvedPointer")," from ",(0,o.kt)("strong",{parentName:"p"},"xinteraction")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"Mesh")," from ",(0,o.kt)("strong",{parentName:"p"},"three.js")," inside at the ",(0,o.kt)("inlineCode",{parentName:"p"},"targetRaySpace"),". The mesh receives a ",(0,o.kt)("inlineCode",{parentName:"p"},"RayBasicMaterial"),", which fades the mesh out into the z-direction. The ",(0,o.kt)("inlineCode",{parentName:"p"},"XCurvedPointer")," enables the controller to interact. By providing the ",(0,o.kt)("inlineCode",{parentName:"p"},"points")," array to the ",(0,o.kt)("inlineCode",{parentName:"p"},"XCurvedPointer"),", the ray is defined as a line starting from ",(0,o.kt)("inlineCode",{parentName:"p"},"(0,0,0)")," and ending at ",(0,o.kt)("inlineCode",{parentName:"p"},"(0,0,-0.1)"),"."),(0,o.kt)("p",null,"Lastly, we bind the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectstart")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"selectend")," events from the input source to the ",(0,o.kt)("inlineCode",{parentName:"p"},"press")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"release")," events of the ",(0,o.kt)("inlineCode",{parentName:"p"},"XCurvedPointer")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"useInputSourceEvent")," hook."),(0,o.kt)(i.w,{path:"natuerlich-short-pointer-controller-xv43wn",mdxType:"CodesandboxEmbed"}),(0,o.kt)(r.Z,{img:t(3058),mdxType:"Image"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RayBasicMaterial } from "@coconut-xr/natuerlich/defaults";\nimport { useRef, Suspense } from "react";\nimport { Mesh, Vector3 } from "three";\nimport { XCurvedPointer } from "@coconut-xr/xinteraction/react";\nimport { useInputSourceEvent, SpaceGroup } from "@coconut-xr/natuerlich/react";\nimport { InputDeviceFunctions } from "@coconut-xr/xinteraction";\n\nconst rayMaterial = new RayBasicMaterial({\n  transparent: true,\n  toneMapped: false,\n});\n\nconst points = [new Vector3(0, 0, 0), new Vector3(0, 0, -0.1)];\n\nexport function ShortPointerController({\n  inputSource,\n  id,\n}: {\n  inputSource: XRInputSource;\n  id: number;\n}) {\n  const pointerRef = useRef<InputDeviceFunctions>(null);\n\n  useInputSourceEvent("selectstart", inputSource, (e) => pointerRef.current?.press(0, e), []);\n  useInputSourceEvent("selectend", inputSource, (e) => pointerRef.current?.release(0, e), []);\n\n  return (\n    <>\n      {inputSource.gripSpace != null && (\n        <SpaceGroup space={inputSource.gripSpace}>\n          <Suspense fallback={null}>\n            <DynamicControllerModel inputSource={inputSource} />\n          </Suspense>\n        </SpaceGroup>\n      )}\n      <SpaceGroup space={inputSource.targetRaySpace}>\n        <XCurvedPointer points={points} ref={pointerRef} id={id} />\n        <mesh\n          scale-x={0.005}\n          scale-y={0.005}\n          scale-z={0.1} //10cm\n          position-z={-0.05}\n          material={rayMaterial}\n        >\n          <boxGeometry />\n        </mesh>\n      </SpaceGroup>\n    </>\n  );\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("admonition",{title:"Question not answered?",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If your questions were not yet answered, visit our ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/NCYM8ujndE"},"Discord")," \ud83d\ude09")))}h.isMDXComponent=!0},655:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});const a=t.p+"assets/images/fist-grab-hand-a5c4d1ab37000f30b9fbbf35b408439d.gif"},3058:(e,n,t)=>{t.r(n),t.d(n,{default:()=>a});const a=t.p+"assets/images/short-pointer-controller-26e911a23325f4b9fd9e4a547aa9d2ab.gif"}}]);