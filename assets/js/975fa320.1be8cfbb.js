"use strict";(self.webpackChunknatuerlich_docs=self.webpackChunknatuerlich_docs||[]).push([[599],{4641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const s={},o="useXR Hook",i={unversionedId:"use-xr",id:"use-xr",title:"useXR Hook",description:"The useXR hook allows to retrieve the current XR state, including the  mode (immersive-vr, immersive-ar, inline, or none), the session, the inputSources, the active layers, the trackedImages, and the trackedPlanes.",source:"@site/docs/use-xr.md",sourceDirName:".",slug:"/use-xr",permalink:"/natuerlich/use-xr",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Teleport",permalink:"/natuerlich/teleport"},next:{title:"All Components Documentation",permalink:"/natuerlich/all-components"}},l={},u=[{value:"Exiting a XR Session",id:"exiting-a-xr-session",level:2}],p={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usexr-hook"},"useXR Hook"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useXR")," hook allows to retrieve the current XR state, including the  ",(0,a.kt)("strong",{parentName:"p"},"mode")," (",(0,a.kt)("inlineCode",{parentName:"p"},"immersive-vr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"immersive-ar"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"inline"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"none"),"), the ",(0,a.kt)("strong",{parentName:"p"},"session"),", the ",(0,a.kt)("strong",{parentName:"p"},"inputSources"),", the active ",(0,a.kt)("strong",{parentName:"p"},"layers"),", the ",(0,a.kt)("strong",{parentName:"p"},"trackedImages"),", and the ",(0,a.kt)("strong",{parentName:"p"},"trackedPlanes"),"."),(0,a.kt)("p",null,"The hook allows developers to listen to any of these values using ",(0,a.kt)("inlineCode",{parentName:"p"},"useXR(state => state.{property})"),". When only the current value is required, ",(0,a.kt)("inlineCode",{parentName:"p"},"useXR.getState().{property}")," can be used."),(0,a.kt)("p",null,"For instance, if you have a cube that should only rotate in ",(0,a.kt)("inlineCode",{parentName:"p"},"AR")," mode, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"useXR.getState().mode")," to determine the current mode inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"useFrame")," hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const ref = useRef<Mesh>(null);\nuseFrame((_, delta) => {\n  const isAR = useXR.getState().mode === "immersive-ar";\n  if (!isAR || ref.current == null) {\n    return;\n  }\n  ref.current.object.rotation.y += delta * 0.1;\n});\nreturn (\n  <mesh ref={ref}>\n    <boxGeometry />\n  </mesh>\n);\n')),(0,a.kt)("h2",{id:"exiting-a-xr-session"},"Exiting a XR Session"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useXR")," hook can be used to exit the current XR session by retrieving the current state with the current session and then calling ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," on the current session."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useXR.getState().session?.end().catch(console.error)\n")),(0,a.kt)("hr",null),(0,a.kt)("admonition",{title:"Question not answered?",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If your questions were not yet answered, visit our ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/NCYM8ujndE"},"Discord")," \ud83d\ude09")))}m.isMDXComponent=!0}}]);