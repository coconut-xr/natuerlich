"use strict";(self.webpackChunknatuerlich_docs=self.webpackChunknatuerlich_docs||[]).push([[778],{5663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var o=t(7462),r=(t(7294),t(3905)),i=t(5851),a=t(5714);const s={},c="Interaction with Objects",l={unversionedId:"object-interaction",id:"object-interaction",title:"Interaction with Objects",description:"Interactions in natuerlich work through properties, such as onClick. The interaction is based on @coconut-xr/xinteraction. For a more in-depth explanation of the event system and its features, visit the xinteraction documentation.",source:"@site/docs/object-interaction.md",sourceDirName:".",slug:"/object-interaction",permalink:"/natuerlich/object-interaction",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Layers",permalink:"/natuerlich/layers"},next:{title:"Tracked Planes",permalink:"/natuerlich/tracked-planes"}},p={},u=[],m={toc:u},d="wrapper";function h(e){let{components:n,...s}=e;return(0,r.kt)(d,(0,o.Z)({},m,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interaction-with-objects"},"Interaction with Objects"),(0,r.kt)("p",null,"Interactions in ",(0,r.kt)("strong",{parentName:"p"},"natuerlich")," work through properties, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),". The interaction is based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/coconut-xr/xinteraction"},"@coconut-xr/xinteraction"),". For a more in-depth explanation of the event system and its features, visit the ",(0,r.kt)("a",{parentName:"p",href:"https://coconut-xr.github.io/xinteraction/#/"},"xinteraction documentation"),"."),(0,r.kt)("p",null,"In the following, we define a box that reacts to the ",(0,r.kt)("inlineCode",{parentName:"p"},"click")," event and increases the box size by 10%. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook stores the scale of the box, and each call to ",(0,r.kt)("inlineCode",{parentName:"p"},"setScale")," takes the current state and multiplies it with ",(0,r.kt)("inlineCode",{parentName:"p"},"1.1"),". When using the default ",(0,r.kt)("inlineCode",{parentName:"p"},"Controllers")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Hands")," with ",(0,r.kt)("inlineCode",{parentName:"p"},'type="grab"'),", the click event will be triggered by grabbing and releasing the box."),(0,r.kt)("p",null,"All interactions built with ",(0,r.kt)("strong",{parentName:"p"},"natuerlich")," work with hands, controllers, and normal mouse and touch controls."),(0,r.kt)(a.w,{path:"natuerlich-object-interaction-lj9lpj",mdxType:"CodesandboxEmbed"}),(0,r.kt)(i.Z,{img:t(9373),mdxType:"Image"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n  XRCanvas,\n  Hands,\n  Controllers\n} from "@coconut-xr/natuerlich/defaults";\nimport { getInputSourceId } from "@coconut-xr/natuerlich";\nimport {\n  useEnterXR,\n  NonImmersiveCamera,\n  ImmersiveSessionOrigin,\n  useInputSources\n} from "@coconut-xr/natuerlich/react";\nimport { useState } from "react";\n\nconst sessionOptions: XRSessionInit = {\n  requiredFeatures: ["local-floor", "hand-tracking"]\n};\n\nexport default function Index() {\n  const enterAR = useEnterXR("immersive-ar", sessionOptions);\n  const inputSources = useInputSources();\n  const [scale, setScale] = useState(0.2);\n  return (\n    <div\n      style={{...}}\n    >\n      <button onClick={enterAR}>Enter AR</button>\n      <XRCanvas>\n        <mesh\n          onClick={() => setScale((s) => s * 1.1)}\n          scale={scale}\n          position={[0, 1.5, 1]}\n        >\n          <boxGeometry />\n          <meshBasicMaterial color="red" />\n        </mesh>\n        <NonImmersiveCamera position={[0, 1.5, 4]} />\n        <ImmersiveSessionOrigin position={[0, 0, 4]}>\n          <Hands type="grab" />\n          <Controllers type="grab" />\n        </ImmersiveSessionOrigin>\n      </XRCanvas>\n    </div>\n  );\n}\n\n')),(0,r.kt)("p",null,"Implementing more complex interactions, such as dragging, can be achieved with ",(0,r.kt)("inlineCode",{parentName:"p"},"setPointerCapture"),". Just as in the web, ",(0,r.kt)("inlineCode",{parentName:"p"},"setPointerCapture")," allows to capture events until a button is released, allowing the implementation of a custom drag behavior. For more information, visit the ",(0,r.kt)("a",{parentName:"p",href:"https://coconut-xr.github.io/xinteraction/#/event-capture.md"},"event capture documentation of xinteraction"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"setPointerCapture")," can be used to implement all kinds of interactions ranging from a 2D simple slider to a 3D steering wheel."),(0,r.kt)("p",null,"In the following code, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onPointerDown")," listener to capture the state of the box when it is grabbed and then apply the position offset to the object inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"onPointerMove")," listener."),(0,r.kt)("p",null,"The example also shows that the dragging interactions work with hands, controllers, mouse, and touch controls."),(0,r.kt)(a.w,{path:"natuerlich-drag-qc378s",mdxType:"CodesandboxEmbed"}),(0,r.kt)(i.Z,{img:t(3249),mdxType:"Image"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n  XRCanvas,\n  PointerHand,\n  PointerController\n} from "@coconut-xr/natuerlich/defaults";\nimport { getInputSourceId } from "@coconut-xr/natuerlich";\nimport { useRef } from "react";\nimport {\n  useEnterXR,\n  NonImmersiveCamera,\n  ImmersiveSessionOrigin,\n  useInputSources\n} from "@coconut-xr/natuerlich/react";\nimport { isXIntersection } from "@coconut-xr/xinteraction";\n\nconst sessionOptions: XRSessionInit = {\n  requiredFeatures: ["local-floor", "hand-tracking"]\n};\n\nexport default function Index() {\n  const enterAR = useEnterXR("immersive-ar", sessionOptions);\n  const inputSources = useInputSources();\n  const ref = useRef<Mesh>(null);\n  const downState = useRef<{\n    pointerId: number;\n    pointToObjectOffset: Vector3;\n  }>();\n  return (\n    <div\n      style={{...}}\n    >\n      <button onClick={enterAR}>Enter AR</button>\n      <XRCanvas>\n        <mesh\n          scale={0.1}\n          onPointerDown={(e) => {\n            if (\n              ref.current != null &&\n              downState.current == null &&\n              isXIntersection(e)\n            ) {\n              e.stopPropagation();\n              (e.target as HTMLElement).setPointerCapture(e.pointerId);\n              downState.current = {\n                pointerId: e.pointerId,\n                pointToObjectOffset: ref.current.position.clone().sub(e.point)\n              };\n            }\n          }}\n          onPointerUp={(e) => {\n            if (downState.current?.pointerId != e.pointerId) {\n              return;\n            }\n            downState.current = undefined;\n          }}\n          onPointerMove={(e) => {\n            if (\n              ref.current == null ||\n              downState.current == null ||\n              e.pointerId != downState.current.pointerId ||\n              !isXIntersection(e)\n            ) {\n              return;\n            }\n            ref.current.position\n              .copy(downState.current.pointToObjectOffset)\n              .add(e.point);\n          }}\n          ref={ref}\n          position={[0, 1.5, 1]}\n        >\n          <boxGeometry />\n          <meshBasicMaterial color="red" />\n        </mesh>\n        <NonImmersiveCamera position={[0, 1.5, 4]} />\n        <ImmersiveSessionOrigin position={[0, 0, 4]}>\n          <Hands type="grab" />\n          <Controllers type="grab" />\n        </ImmersiveSessionOrigin>\n      </XRCanvas>\n    </div>\n  );\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"For more examples on more complex interactions including resizing when grabbed by multiple input sources take a look at the ",(0,r.kt)("a",{parentName:"em",href:"https://github.com/coconut-xr/natuerlich/blob/main/src/defaults/grabbable.tsx"},"Grabbable Implemenation"),"."))),(0,r.kt)("hr",null),(0,r.kt)("admonition",{title:"Question not answered?",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If your questions were not yet answered, visit our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/NCYM8ujndE"},"Discord")," \ud83d\ude09")))}h.isMDXComponent=!0},3249:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o=t.p+"assets/images/object-draggable-7b8d5a090a7821ec7d9fb3c0e2a325f4.gif"},9373:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});const o=t.p+"assets/images/object-interactable-3d847166343ecca6afd6c2a403ad8f35.gif"}}]);